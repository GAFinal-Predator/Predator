/// 2024. 07. 17 김상준
/// ProgressTracker 를 사용하여 Game 진행 도중에 Progress 관리로 Save / Load 가 되어야 하는
/// 대상들을 목록화한 txt 파일입니다.

0. Script / Action
1. InteractableData
2. OrnamentData (Action 으로 인해 관리 필요)
3. ParticleData (Action 으로 인해 관리 필요)


4. WaveData
5. UnitData
   (CameraData 관리까지 가능할 것으로 보입니다. (Ideal))
   (Skill 등 연계된 pod 까지 관리해야 할 것으로 보입니다.)
6. UI

PlayerController
   -> PlayerUnit / EnemyUnit

/// 2024.07.18 이윤우
/// ProgressTracker를 통해 Save/Load를 했을때 진행할 작업들의 예상 순서

Save
0. UI 중 되돌려 놔야 하는 부분들 기록해 놓기
1. 스크립트들 중 어떤 스크립트들이 비활성화되었고, 어떤 스크립트들이 활성화되어 있는지, 그 정보를 map<script,bool>에 저장
2. 액션들 중 어떤 액션들이 비활성화되었고, 어떤 액션들이 활성화되어 있는지, 그 정보를 map<action,bool>에 저장
3. 웨이브 중 어떤 웨이브들이 휘발되었고, 어떤 웨이브들이 아직 실행되지 않았는지 정보를 저장
4. 플레이어 유닛들의 위치, 스킬 업그레이드 현황을 저장
5. interactable의 상태를 저장

Load
-1. UI 중 되돌려 놔야 하는 부분들 되돌려 놓기
0. 로드 전 배치된 적군 유닛들 모두 풀로 되돌려 놓기
1. 스크립트들 중 어떤 스크립트들이 비활성화되었고, 어떤 스크립트들이 활성화되어 있는지, 그 정보를 로드
2. 액션들 중 어떤 액션들이 비활성화되었고, 어떤 액션들이 활성화되어 있는지, 그 정보를 로드
3. 웨이브 중 어떤 웨이브들이 휘발되었고, 어떤 웨이브들이 아직 실행되지 않았는지 정보를 로드
4. 플레이어 유닛들의 위치, 스킬 업그레이드 현황을 로드
5. interactable의 상태를 로드